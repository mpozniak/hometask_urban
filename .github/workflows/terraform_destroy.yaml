name: "-= !!! Terraform DESTROY !!! =- (destroy all provisioned GCP resources)"

on:
  workflow_dispatch:
    inputs:
      environment:
        description: "Deployment environment"
        type: choice
        default: 'development'
        options:
          - development
          - staging
          - production
        required: true

env:
  PROJECT: ${{ secrets.GCP_PROJECT }}
  GCP_REGION: 'us-west1'

jobs:
  setup:
    name: "Prepare configuration/variables"
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash

    steps:
      - name: Prepare outputs
        id: prepare_outputs
        run: |
          echo "::set-output name=environment::${{ inputs.environment }}"

    outputs:
      environment: ${{ steps.prepare_outputs.outputs.environment }}
  
  destroy_application:
    if: ${{ success() }}
    needs: [setup]
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    env:
      TF_VAR_gcp_project: ${{ env.PROJECT }}
      TF_VAR_gcp_region: ${{ env.GCP_REGION }}
      TF_VAR_environment: ${{ needs.setup.outputs.environment }}
      TF_VAR_tfstate_bucket_name: ${{ secrets.BUCKET_NAME }}
    
    steps:
      - name: Check out repository
        uses: actions/checkout@master

      - id: "auth"
        uses: "google-github-actions/auth@v0"
        with:
          credentials_json: "${{ secrets.GCP_CREDENTIALS }}"

      # Setup GCP CLI tools
      - uses: google-github-actions/setup-gcloud@v0
        id: setup_gcloud
        with:
          export_default_credentials: true

      # Setup Terraform
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.3.0

      # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
      - name: Terraform Init
        run: |
          cd infrastructure/app-level/
          terraform init -input=false -backend-config="bucket=${{ secrets.BUCKET_NAME }}" -backend-config="prefix=${{ env.PROJECT }}-${{ needs.setup.outputs.environment }}-application"

      # Destroy terraform resources
      - name: Terraform Destroy
        run: |
          cd infrastructure/app-level/
          terraform apply -destroy -auto-approve

  destroy_infrastructure:
    if: ${{ success() }}
    needs: [setup, destroy_application]
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    env:
      TF_VAR_gcp_project: ${{ env.PROJECT }}
      TF_VAR_gcp_region: ${{ env.GCP_REGION }}
      TF_VAR_environment: ${{ needs.setup.outputs.environment }}
    
    steps:
      - name: Check out repository
        uses: actions/checkout@master

      - id: "auth"
        uses: "google-github-actions/auth@v0"
        with:
          credentials_json: "${{ secrets.GCP_CREDENTIALS }}"

      # Setup GCP CLI tools
      - uses: google-github-actions/setup-gcloud@v0
        id: setup_gcloud
        with:
          export_default_credentials: true

      # Setup Terraform
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.3.0

      # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
      - name: Terraform Init
        run: |
          cd infrastructure/
          terraform init -input=false -backend-config="bucket=${{ secrets.BUCKET_NAME }}" -backend-config="prefix=${{ env.PROJECT }}-${{ needs.setup.outputs.environment }}-infrastructure"

      # Destroy terraform resources
      - name: Terraform Destroy
        run: |
          cd infrastructure/
          terraform apply -destroy -auto-approve