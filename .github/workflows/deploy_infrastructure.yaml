name: Deploy GCP infrastructure
env:
  PROJECT: ${{ secrets.GCP_PROJECT }}
  GCP_REGION: 'us-west1'
  TF_VAR_gcp_project: ${{ secrets.GCP_PROJECT }}
  ENVIRONMENT: 'development' # You are able to change environment to 'production' for 'main' branch

on:
  push:
    branches:
      - main
    paths:
      - 'infrastructure/**.tf'
      - '!infrastructure/modules/application/**.tf'
      - '!infrastructure/app-level/**.tf'

jobs:
  deploy_infrastructure:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    env:
      TF_VAR_gcp_project: ${{ env.PROJECT }}
      TF_VAR_gcp_region: ${ env.GCP_REGION }
      TF_VAR_environment: ${ env.ENVIRONMENT }
    
    steps:
      - name: Check out repository
        uses: actions/checkout@master

      - id: "auth"
        uses: "google-github-actions/auth@v0"
        with:
          credentials_json: "${{ secrets.GCP_CREDENTIALS }}"

      # Setup GCP CLI tools
      - uses: google-github-actions/setup-gcloud@v0
        id: setup_gcloud
        with:
          export_default_credentials: true

      # Setup Terraform
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.3.0

      # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
      - name: Terraform Init
        run: |
          cd infrastructure/
          terraform init -input=false -backend-config="bucket=${{ secrets.BUCKET_NAME }}" -backend-config="prefix=${{ env.PROJECT }}-${{ env.ENVIRONMENT }}-infrastructure"

      - name: Terraform validation
        run: |
          cd infrastructure/
          terraform validate

      # Checks that all Terraform configuration files adhere to a canonical format
      - name: Terraform Format
        run: |
          cd infrastructure/
          terraform fmt -recursive -no-color -diff -check -list=true .

      # Generates an execution plan for Terraform
      - name: Terraform Plan
        run: |
          cd infrastructure/
          terraform plan -out tfplan.binary

      # Apply terraform resources
      - name: Terraform Apply
        run: |
          cd infrastructure/
          terraform apply -compact-warnings -auto-approve ./tfplan.binary
