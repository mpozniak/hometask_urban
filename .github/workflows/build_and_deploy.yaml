name: "Build app Docker image and Deploy app"

env:
  PROJECT: ${{ secrets.GCP_PROJECT }}
  GCP_REGION: "us-west1"
  APP_NAME: "urban"
  APP_LABEL: "UrbanApp"

on:
  workflow_dispatch:
    inputs:
      environment:
        description: "Deployment environment"
        type: choice
        default: "development"
        options:
          - development
          - staging
          - production
        required: true
      version:
        description: "Application version (vMajor.Minor.Fix)"
        type: string
        required: false
        default: v0.0.0

jobs:
  setup:
    name: "Prepare configuration/variables"
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash

    steps:
      - name: Setup app version [condition %1]
        if: ${{ inputs.version == 'v0.0.0' }}
        run: |
          echo Please specify the app version. Wrong app version: ${{ inputs.version }}
          exit 1

      - name: Setup app version [condition %2]
        if: ${{ inputs.version != 'v0.0.0' }}
        run: |
          APP_VERSION=$(echo ${{ inputs.version }} | tr '[:upper:]' '[:lower:]')
          echo The app version is: ${{ inputs.version }}
          echo "app_version=${{ inputs.version }}" >> $GITHUB_ENV

      - name: Prepare outputs
        id: prepare_outputs
        run: |
          echo "::set-output name=environment::${{ inputs.environment }}"
          echo "::set-output name=app_version::${{ env.app_version }}"

    outputs:
      environment: ${{ steps.prepare_outputs.outputs.environment }}
      app_version: ${{ steps.prepare_outputs.outputs.app_version }}

  build_app_image:
    if: ${{ success() }}
    needs: [setup]
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    steps:
      - name: Check out repository
        uses: actions/checkout@master

      - id: "auth"
        uses: "google-github-actions/auth@v0"
        with:
          credentials_json: "${{ secrets.GCP_CREDENTIALS }}"

      # Setup GCP CLI tools
      - uses: google-github-actions/setup-gcloud@v0
        id: setup_gcloud

      - name: "Test gcloud CLI"
        run: |
          gcloud info
          gcloud storage buckets describe gs://${{ secrets.BUCKET_NAME }} --format="default(versioning)"

      # Configure Docker to use the gcloud command-line tool as a credential
      - name: Configure Dcoker AUTH
        run: |
          gcloud --quiet auth configure-docker

      # Build Docker image
      - name: Build Docker image
        id: docker_build
        run: |-
          docker build \
            --tag gcr.io/${{ env.PROJECT }}/${{ env.APP_NAME }}:${{ needs.setup.outputs.app_version }} \
            -f application/Dockerfile \
            application/.

      # Push the Docker image to Google Container Registry
      - name: Push app Docker image
        id: docker_push
        run: |
          docker push gcr.io/${{ env.PROJECT }}/${{ env.APP_NAME }}:${{ needs.setup.outputs.app_version }}

      # Vulnerability and securtiy scan/check
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: "image"
          image-ref: gcr.io/${{ env.PROJECT }}/${{ env.APP_NAME }}:${{ needs.setup.outputs.app_version }}
          format: "table"
          vuln-type: "os,library"
          severity: "UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL"
          security-checks: "vuln"

  deploy_application:
    if: ${{ success() }}
    needs: [setup, build_app_image]
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    env:
      TF_VAR_gcp_project: ${{ env.PROJECT }}
      TF_VAR_gcp_region: ${{ env.GCP_REGION }}
      TF_VAR_environment: ${{ needs.setup.outputs.environment }}
      TF_VAR_tfstate_bucket_name: ${{ secrets.BUCKET_NAME }}
      TF_VAR_application_name: ${{ env.APP_NAME }}
      TF_VAR_application_label: ${{ env.APP_LABEL }}
      TF_VAR_application_version: ${{ needs.setup.outputs.app_version }}

    steps:
      - name: Check out repository
        uses: actions/checkout@master

      - id: "auth"
        uses: "google-github-actions/auth@v0"
        with:
          credentials_json: "${{ secrets.GCP_CREDENTIALS }}"

      # Setup GCP CLI tools
      - uses: google-github-actions/setup-gcloud@v0
        id: setup_gcloud
        with:
          export_default_credentials: true

      # Setup Terraform
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.3.0

      # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
      - name: Terraform Init
        run: |
          cd infrastructure/app-level
          terraform init -input=false -backend-config="bucket=${{ secrets.BUCKET_NAME }}" -backend-config="prefix=${{ env.PROJECT }}-${{ needs.setup.outputs.environment }}-application"
        env:
          TF_VAR_gcp_region: ${{ env.GCP_REGION }}

      - name: Terraform validation
        run: |
          cd infrastructure/app-level
          terraform validate

      # Checks that all Terraform configuration files adhere to a canonical format
      - name: Terraform Format
        run: |
          cd infrastructure/app-level
          terraform fmt -recursive -no-color -diff -check -list=true .

      # Generates an execution plan for Terraform
      - name: Terraform Plan
        run: |
          cd infrastructure/app-level
          terraform plan -out tfplan.binary

      # Apply terraform resources
      - name: Terraform Apply
        run: |
          cd infrastructure/app-level
          terraform apply -compact-warnings -auto-approve ./tfplan.binary